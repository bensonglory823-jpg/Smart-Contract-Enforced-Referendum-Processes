(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-PROPOSAL-NOT-FOUND u101)
(define-constant ERR-VOTING-NOT-OPEN u102)
(define-constant ERR-ALREADY-VOTED u103)
(define-constant ERR-INVALID-CHOICE u104)
(define-constant ERR-INVALID-WEIGHT u105)
(define-constant ERR-NOT-ELIGIBLE u106)
(define-constant ERR-TALLY-NOT-ALLOWED u107)
(define-constant ERR-INVALID-PROPOSAL-ID u108)
(define-constant ERR-DELEGATION-NOT-FOUND u109)
(define-constant ERR-INVALID-DELEGATE u110)
(define-constant ERR-VOTE-EXCEEDS-WEIGHT u111)
(define-constant ERR-PROPOSAL-EXPIRED u112)
(define-constant ERR-INVALID-START-TIME u113)
(define-constant ERR-INVALID-END-TIME u114)
(define-constant ERR-INSUFFICIENT-BALANCE u115)
(define-constant ERR-TRANSFER-FAILED u116)
(define-constant ERR-MAP-INSERT-FAILED u117)
(define-constant ERR-INVALID-STATUS u118)
(define-constant ERR-AUTHORITY-NOT-SET u119)
(define-constant ERR-INVALID-THRESHOLD u120)
(define-constant ERR-VOTE-NOT-CAST u121)
(define-constant ERR-INVALID-COMMITMENT u122)
(define-constant ERR-REVEAL-FAILED u123)
(define-constant ERR-COMMITMENT-NOT-FOUND u124)
(define-constant ERR-INVALID-REVEAL-PHASE u125)
(define-constant ERR-TALLY-ALREADY-DONE u126)
(define-constant ERR-INVALID-VOTE-TYPE u127)
(define-constant ERR-MAX-VOTES-EXCEEDED u128)
(define-constant ERR-INVALID-QUORUM u129)
(define-constant ERR-QUORUM-NOT-MET u130)

(define-data-var authority principal tx-sender)
(define-data-var vote-fee uint u10)
(define-data-var max-votes-per-proposal uint u10000)
(define-data-var min-quorum uint u50)

(define-map proposals-voting-status uint { start: uint, end: uint, active: bool, tallied: bool })
(define-map voter-weights { proposal-id: uint, voter: principal } uint)
(define-map votes-cast { proposal-id: uint, voter: principal } { choice: (string-ascii 32), weight: uint })
(define-map delegated-votes { delegator: principal, proposal-id: uint } principal)
(define-map vote-commitments { proposal-id: uint, voter: principal } (buff 32))
(define-map tally-results { proposal-id: uint, choice: (string-ascii 32) } uint)
(define-map proposal-quorums uint uint)
(define-map total-votes-cast uint uint)

(define-read-only (get-voting-status (proposal-id uint))
  (map-get? proposals-voting-status proposal-id))

(define-read-only (get-voter-weight (proposal-id uint) (voter principal))
  (default-to u0 (map-get? voter-weights { proposal-id: proposal-id, voter: voter })))

(define-read-only (get-vote (proposal-id uint) (voter principal))
  (map-get? votes-cast { proposal-id: proposal-id, voter: voter }))

(define-read-only (get-delegated-vote (delegator principal) (proposal-id uint))
  (map-get? delegated-votes { delegator: delegator, proposal-id: proposal-id }))

(define-read-only (get-commitment (proposal-id uint) (voter principal))
  (map-get? vote-commitments { proposal-id: proposal-id, voter: voter }))

(define-read-only (get-tally (proposal-id uint) (choice (string-ascii 32)))
  (default-to u0 (map-get? tally-results { proposal-id: proposal-id, choice: choice })))

(define-read-only (get-proposal-quorum (proposal-id uint))
  (default-to u0 (map-get? proposal-quorums proposal-id)))

(define-read-only (get-total-votes (proposal-id uint))
  (default-to u0 (map-get? total-votes-cast proposal-id)))

(define-private (is-voting-open (proposal-id uint))
  (let ((status (unwrap! (get-voting-status proposal-id) false)))
    (and (get active status)
         (>= block-height (get start status))
         (< block-height (get end status)))))

(define-private (has-voted (proposal-id uint) (voter principal))
  (is-some (get-vote proposal-id voter)))

(define-private (validate-choice (choice (string-ascii 32)))
  (or (is-eq choice "yes") (is-eq choice "no") (is-eq choice "abstain")))

(define-private (validate-weight (weight uint))
  (> weight u0))

(define-private (is-eligible (proposal-id uint) (voter principal))
  (let ((weight (get-voter-weight proposal-id voter)))
    (> weight u0)))

(define-private (transfer-fee (amount uint) (recipient principal))
  (try! (stx-transfer? amount tx-sender recipient)))

(define-public (set-authority (new-authority principal))
  (begin
    (asserts! (is-eq tx-sender (var-get authority)) (err ERR-NOT-AUTHORIZED))
    (var-set authority new-authority)
    (ok true)))

(define-public (set-vote-fee (new-fee uint))
  (begin
    (asserts! (is-eq tx-sender (var-get authority)) (err ERR-NOT-AUTHORIZED))
    (var-set vote-fee new-fee)
    (ok true)))

(define-public (set-max-votes (new-max uint))
  (begin
    (asserts! (is-eq tx-sender (var-get authority)) (err ERR-NOT-AUTHORIZED))
    (var-set max-votes-per-proposal new-max)
    (ok true)))

(define-public (set-min-quorum (new-quorum uint))
  (begin
    (asserts! (is-eq tx-sender (var-get authority)) (err ERR-NOT-AUTHORIZED))
    (asserts! (and (> new-quorum u0) (<= new-quorum u100)) (err ERR-INVALID-QUORUM))
    (var-set min-quorum new-quorum)
    (ok true)))

(define-public (init-proposal-voting (proposal-id uint) (start uint) (end uint) (quorum uint))
  (begin
    (asserts! (is-eq tx-sender (var-get authority)) (err ERR-NOT-AUTHORIZED))
    (asserts! (> start block-height) (err ERR-INVALID-START-TIME))
    (asserts! (> end start) (err ERR-INVALID-END-TIME))
    (asserts! (and (> quorum u0) (<= quorum u100)) (err ERR-INVALID-QUORUM))
    (map-set proposals-voting-status proposal-id { start: start, end: end, active: true, tallied: false })
    (map-set proposal-quorums proposal-id quorum)
    (ok true)))

(define-public (commit-vote (proposal-id uint) (commitment (buff 32)))
  (let ((voter tx-sender))
    (asserts! (is-voting-open proposal-id) (err ERR-VOTING-NOT-OPEN))
    (asserts! (not (has-voted proposal-id voter)) (err ERR-ALREADY-VOTED))
    (asserts! (is-eligible proposal-id voter) (err ERR-NOT-ELIGIBLE))
    (try! (transfer-fee (var-get vote-fee) (var-get authority)))
    (map-set vote-commitments { proposal-id: proposal-id, voter: voter } commitment)
    (print { event: "vote-committed", proposal-id: proposal-id, voter: voter })
    (ok true)))

(define-public (reveal-vote (proposal-id uint) (choice (string-ascii 32)) (weight uint) (salt (buff 32)))
  (let ((voter tx-sender)
        (status (unwrap! (get-voting-status proposal-id) (err ERR-PROPOSAL-NOT-FOUND)))
        (commitment (unwrap! (get-commitment proposal-id voter) (err ERR-COMMITMENT-NOT-FOUND)))
        (computed-commit (sha256 (concat (as-max-len? (concat choice salt) u64))))
    (asserts! (> block-height (get end status)) (err ERR-INVALID-REVEAL-PHASE))
    (asserts! (not (get tallied status)) (err ERR-TALLY-ALREADY-DONE))
    (asserts! (is-eq commitment computed-commit) (err ERR-REVEAL-FAILED))
    (asserts! (validate-choice choice) (err ERR-INVALID-CHOICE))
    (asserts! (validate-weight weight) (err ERR-INVALID-WEIGHT))
    (asserts! (<= weight (get-voter-weight proposal-id voter)) (err ERR-VOTE-EXCEEDS-WEIGHT))
    (map-set votes-cast { proposal-id: proposal-id, voter: voter } { choice: choice, weight: weight })
    (map-delete vote-commitments { proposal-id: proposal-id, voter: voter })
    (print { event: "vote-revealed", proposal-id: proposal-id, voter: voter, choice: choice })
    (ok true)))

(define-public (cast-direct-vote (proposal-id uint) (choice (string-ascii 32)) (weight uint))
  (let ((voter tx-sender)
        (total-votes (get-total-votes proposal-id)))
    (asserts! (is-voting-open proposal-id) (err ERR-VOTING-NOT-OPEN))
    (asserts! (not (has-voted proposal-id voter)) (err ERR-ALREADY-VOTED))
    (asserts! (is-eligible proposal-id voter) (err ERR-NOT-ELIGIBLE))
    (asserts! (validate-choice choice) (err ERR-INVALID-CHOICE))
    (asserts! (validate-weight weight) (err ERR-INVALID-WEIGHT))
    (asserts! (<= weight (get-voter-weight proposal-id voter)) (err ERR-VOTE-EXCEEDS-WEIGHT))
    (asserts! (< total-votes (var-get max-votes-per-proposal)) (err ERR-MAX-VOTES-EXCEEDED))
    (try! (transfer-fee (var-get vote-fee) (var-get authority)))
    (map-set votes-cast { proposal-id: proposal-id, voter: voter } { choice: choice, weight: weight })
    (map-set total-votes-cast proposal-id (+ total-votes u1))
    (print { event: "direct-vote-cast", proposal-id: proposal-id, voter: voter, choice: choice })
    (ok true)))

(define-public (delegate-vote (proposal-id uint) (delegate principal))
  (let ((delegator tx-sender))
    (asserts! (is-voting-open proposal-id) (err ERR-VOTING-NOT-OPEN))
    (asserts! (not (has-voted proposal-id delegator)) (err ERR-ALREADY-VOTED))
    (asserts! (is-eligible proposal-id delegator) (err ERR-NOT-ELIGIBLE))
    (asserts! (not (is-eq delegator delegate)) (err ERR-INVALID-DELEGATE))
    (asserts! (is-eligible proposal-id delegate) (err ERR-INVALID-DELEGATE))
    (map-set delegated-votes { delegator: delegator, proposal-id: proposal-id } delegate)
    (print { event: "vote-delegated", proposal-id: proposal-id, delegator: delegator, delegate: delegate })
    (ok true)))

(define-public (tally-votes (proposal-id uint))
  (let ((status (unwrap! (get-voting-status proposal-id) (err ERR-PROPOSAL-NOT-FOUND)))
        (quorum (get-proposal-quorum proposal-id))
        (total-cast (get-total-votes proposal-id)))
    (asserts! (> block-height (get end status)) (err ERR-TALLY-NOT-ALLOWED))
    (asserts! (not (get tallied status)) (err ERR-TALLY-ALREADY-DONE))
    (asserts! (>= (* total-cast u100) (* quorum (fold + (map-get? voter-weights proposal-id) u0))) (err ERR-QUORUM-NOT-MET))
    (fold tally-choice (list "yes" "no" "abstain") proposal-id)
    (map-set proposals-voting-status proposal-id (merge status { tallied: true }))
    (print { event: "votes-tallied", proposal-id: proposal-id })
    (ok true)))

(define-private (tally-choice (choice (string-ascii 32)) (proposal-id uint))
  (let ((current-tally (get-tally proposal-id choice)))
    (map-set tally-results { proposal-id: proposal-id, choice: choice }
      (+ current-tally (fold sum-vote-weight (filter (lambda (v) (is-eq (get choice v) choice)) (map-get? votes-cast proposal-id)) u0)))
    proposal-id))

(define-private (sum-vote-weight (vote { choice: (string-ascii 32), weight: uint }) (acc uint))
  (+ acc (get weight vote)))

(define-public (set-voter-weight (proposal-id uint) (voter principal) (weight uint))
  (begin
    (asserts! (is-eq tx-sender (var-get authority)) (err ERR-NOT-AUTHORIZED))
    (asserts! (validate-weight weight) (err ERR-INVALID-WEIGHT))
    (map-set voter-weights { proposal-id: proposal-id, voter: voter } weight)
    (ok true)))

(define-public (close-proposal-voting (proposal-id uint))
  (let ((status (unwrap! (get-voting-status proposal-id) (err ERR-PROPOSAL-NOT-FOUND))))
    (asserts! (is-eq tx-sender (var-get authority)) (err ERR-NOT-AUTHORIZED))
    (asserts! (get active status) (err ERR-INVALID-STATUS))
    (map-set proposals-voting-status proposal-id (merge status { active: false }))
    (ok true))))